{
    "id": 3,
    "title":"LOCATIONS SAISONNIERES / REACT",
    "screenshot":"/cases/kasa/kasa3-3.webp",
    "bulletpoints": ["Développer le <b>frontend</b> d'un site de réservation à l'aide de <b>React</b>.", 
    "Procéder à une <b>refonte visuelle du design système</b> existant.", 
    "Gérer la navigation de l'application via <b>React Router</b>.",
    "Privilégier l'utilisation de <b>composants réutilisables</b>."],
    "tags" : ["React",
                "Figma",
                "Vite"],
    "github" : "https://github.com/ask0ldd/P6-React",
    "highlights" : [{
        "title" : "CUSTOM HOOK",
        "file" : "/cases/kasa/code/codecustomhook.html",
        "description" : "Custom Hook servant à rapatrier certaines données de manière asynchrone. useEffect n'acceptant pas les promesses en paramêtre, fetchData() doit être exécutée au sein de la fonction passée. Deux states permettent de suivre l'état de la requête. [url] est passé en paramêtre pour que la fonction associée à useEffect ne soit pas exécutée après chaque mise à jour du DOM.",
        "tags" : ["react",
        "fetch",
        "useEffect",
        "useState",
        "json",
        "async/await"]
    },
    {
        "title" : "BOOK CONTROLLER",
        "file" : "/cases/kasa/code/codebookcontroller.html",
        "description" : "Controller permettant notamment de créer, de modifier ou d'effacer des documents au sein de la collection Book. Multer intervenant avant l'étape de validation du Schéma, il était nécessaire, en cas de rejet ou d'indisponibilité de la base de données, d'effacer le fichier stocké sur le serveur et ne pouvant être alors affilié à aucun document. Une attention particulière a été portée à la gestion des erreurs et aux réponses afférentes.",
        "tags" : ["mongoose",
        "jsonwebtokens",
        "multer",
        "middlewares",
        "formdata/multipart",
        "fs.unlink"]
    },
    {
        "title" : "USER CONTROLLER",
        "file" : "/cases/kasa/code/codeusercontroller.html",
        "description" : "Méthodes permettant l'inscription puis l'authentification d'un utilisateur. Pour assurer la sécurisation du mot de passe saisi à l'inscription, celui-ci est encrypté à l'aide de la méthode hash de la librairie bcrypt, avant d'être inséré en base de données. Ultérieurement, lors d'une tentative de connexion, bcrypt est cette fois capable de déterminer si un mot de passe saisi par un utilisateur correspond bien à un hash présent en bdd.",
        "tags" : ["mongoose",
        "jsonwebtokens",
        "hashing",
        "authentification",
        "middlewares",
        "bcrypt"]
    }],
    "banner" : "/cases/kasa/case3bg.webp",
    "verbose" : "Il était attendu de moi que je développe le frontend d'un service de mise à disposition d'hébergements temporaires. Une maquette fournie devait être rendue fonctionnelle et naviguable, principalement pour des besoins de testing utilisateurs. L'utilisation de React ainsi que de React Router faisaient partie des impératifs imposés. A noter de plus que, du fait d'un backend non finalisé, un jeu de données au format json m'avait été fourni pour peupler de manière crédible et dynamique mes différentes pages.<br/><br/>Les captures présentées présentées ici ne représentent pas la version livrée du site. Puisque non satisfait par la maquette fournie, j'ai procédé à une refonte intégrale de la charte graphique avant intégration du projet à mon portfolio.<br/><br/>Ci dessous, vous pourrez apprécier la nature du redesign entrepris."
}