{
    "id": 1,
    "title":"ARCHITECT PORTFOLIO / FRONTEND",
    "screenshot":"/cases/bluel/bluel1.webp",
    "bulletpoints": ["Coding the <b>responsive front-end</b> of an already designed portfolio.", 
    "Implementing the <b>back-office</b> which allows to add new pictures.", 
    "Implementing the login form & dealing with the <b>sessions persistence</b>.",
    "All this had to be done in <b>pure Javascript</b>, with the use of no library."],
    "tags" : ["Javascript ES6",
                "HTML + SASS",
                "Figma"],
    "github" : "https://github.com/ask0ldd/P3-OC-JS-Frontend",
    "highlights" : [{
        "title" : "API WRAPPER",
        "file" : "/cases/bluel/code/codeapi.html",
        "description" : "Surcouche permettant d'intéragir aisément avec les différents endpoints de l'API fournie. Une attention particulière a été portée à la gestion des erreurs, avec une standardisation des messages renvoyés. L'utilisation de la paire async / await a été privilégiée au détriment de .then / .catch pour des raisons évidentes de lisibilité.",
        "tags" : ["fetch",
        "API",
        "tokens",
        "formData",
        "async / await",
        "request headers",
        "cookies"]
    },
    {
        "title" : "GALERIE",
        "file" : "/cases/bluel/code/codegallery.html",
        "description" : "Objet représentant la gallerie principale. Via une requête auprès de l'API et une manipulation du DOM, Les travaux uploadés par la photographe sont peuplés dynamiquement. Il en va de même pour les filtres utiles. Un message d'erreur s'affiche lorsque le endpoint dédié est inaccessible. L'attribut crossorigin des éléments images est renseigné de manière à ne pas déclencher d'erreur.",
        "tags" : ["dynamic gallery",
        "filtering",
        "DOM insertions",
        "cors"]
    },
    {
        "title" : "AUTHENTIFICATION",
        "file" : "/cases/bluel/code/codelog.html",
        "description" : "Helper proposant des méthodes liées à l'authentification. getToken permet, notamment, de parcourir les cookies et d'extraire un token d'authentification si existant. Une méthode de validation supplémentaire a été implémentée côté client, de manière à vérifier la cohérence des informations saisies au sein du formulaire de login et ce, avant toute transmission de données à l'API.",
        "tags" : ["form validation",
        "tokens",
        "cookies",
        "admin mode",
        "formData"]
    }]
}