{
    "id": 1,
    "title":"ARCHITECT PORTFOLIO / FRONTEND",
    "screenshot":"/cases/bluel/bluel1.webp",
    "bulletpoints": ["Développer <b>un front-end responsive</b> à partir d'une API et de designs fournis.", 
    "Implémenter un <b>back-office</b> permettant l'upload de nouveaux travaux.", 
    "Implémenter un formulaire de connexion et gérer la <b>persistance de la session</b>.",
    "Tout ceci devait être fait en <b>Javascript pur</b>, sans dépendances."],
    "tags" : ["Javascript ES6",
                "HTML + SASS",
                "Figma"],
    "github" : "https://github.com/ask0ldd/P3-OC-JS-Frontend",
    "highlights" : [{
        "title" : "API WRAPPER",
        "file" : "/cases/bluel/code/codeapi.html",
        "description" : "Surcouche permettant d'intéragir aisément avec les différents endpoints de l'API fournie. Une attention particulière a été portée à la gestion des erreurs, avec une standardisation des messages renvoyés. L'utilisation de la paire async / await a été privilégiée au détriment de .then / .catch pour des raisons évidentes de lisibilité.",
        "tags" : ["fetch",
        "API",
        "tokens",
        "formData",
        "async / await",
        "request headers",
        "cookies"]
    },
    {
        "title" : "GALERIE",
        "file" : "/cases/bluel/code/codegallery.html",
        "description" : "Objet représentant la gallerie principale. Via une requête auprès de l'API et une manipulation du DOM, Les travaux uploadés par la photographe sont peuplés dynamiquement. Il en va de même pour les filtres pertinents. Un message d'erreur s'affiche lorsque le endpoint dédié est inaccessible. L'attribut crossorigin des éléments images est renseigné de manière à ne pas déclencher d'erreur.",
        "tags" : ["dynamic gallery",
        "filtering",
        "DOM insertions",
        "cors"]
    },
    {
        "title" : "AUTHENTIFICATION",
        "file" : "/cases/bluel/code/codelog.html",
        "description" : "Helper proposant des méthodes liées à l'authentification. getToken permet, notamment, de parcourir les cookies et d'extraire un token d'authentification si existant. Une méthode de validation supplémentaire a été implémentée côté client, de manière à vérifier la cohérence des informations saisies au sein du formulaire de login et ce, avant toute transmission de données à l'API.",
        "tags" : ["form validation",
        "tokens",
        "cookies",
        "admin mode",
        "formData"]
    }],
    "banner" : "/cases/bluel/case1bg.webp",
    "verbose" : "Ce projet consistait en l'implémentation du frontend d'un site devant permettre à une architecte d'intérieur, Sophie Bluel, d'uploader ses différents travaux et de les exposer à ses futurs visiteurs.<br/><br/>Une galerie dynamique devait ainsi être codée, satisfaisant une maquette présente sur figma; et puisant ses données auprès d'une API existante.<br/><br/>Cette galerie devait de plus présenter un système de filtres eux aussi dynamiques.<br/><br/>Pour permettre à l'architecte d'administrer le site, un système d'authentification devait être implémenté, incluant une mémorisation de l'identité de l'administrateur via cookie. Cookie étant ensuite analysé pour permettre un accès aux opérations CUD.<br/><br/>L'administration de la galerie devait prendre place dans une modale qui devait être codée en javascript pur, sans utilisation de librairie.<br/><br/>Et une attention particulière devait être portée à la responsivité du site."
}